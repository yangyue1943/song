package com.studio.builder.transform;import com.song.db.DBColumn;import com.song.db.DBConnectionConfig;import com.song.db.DBTable;import com.song.db.PrimaryKeyType;import com.studio.builder.metadata.DbStructFactory;import com.studio.builder.metadata.DbStructReader;import com.studio.builder.mapping.DataTypeMapping;import com.studio.model.Column;import com.studio.model.Connection;import com.studio.model.Table;import java.util.ArrayList;import java.util.List;/** * description: * author:          song * createDate:      2017/10/25 */public class DbModelTransform extends ModelTransform {    private DbStructReader dbStructReader;    protected DBConnectionConfig dbConnectionConfig;    public DbModelTransform(Connection connection) throws Exception {        this.setDbType(connection.getDbType());        //初始化连接对象        dbConnectionConfig = new DBConnectionConfig(connection.getDbType(), connection.getConnectionString());        //初始化数据库结构读取器        dbStructReader = DbStructFactory.create(dbConnectionConfig);    }    /**     * 将表结构转换为生成器模型     * @return     */    public List<Table> getTables() {        List<Table> tables = new ArrayList<Table>();        //获取所有表名        List<String> dbTableNames= dbStructReader.getUserTableNames();        for (String dbTableName : dbTableNames) {            //获取表结构信息            DBTable dbTable = dbStructReader.getTable(dbTableName);            //将表结构转换为生成器需要的模型            Table table=new Table();            table.setTableCode(dbTable.getCode());            table.setTableName(dbTable.getName());            table.setComment(dbTable.getComment());            table.setColumns(getColumns(dbTable.getDbColumns(),table));        }        return tables;    }    /**     * 将表字段结构转换为生成器模型     * @param dbColumns     * @return     */    private List<Column> getColumns(List<DBColumn> dbColumns, Table table) {        List<Column> columns = new ArrayList<Column>();        for (DBColumn dbColumn : dbColumns) {            Column column = new Column();            column.setField(dbColumn.getField());            column.setDisplay(dbColumn.getDisplay());            column.setDBDataType(dbColumn.getDataType());            column.setLength(dbColumn.getLength());            column.setRequired(dbColumn.isNullable());            column.setComment(dbColumn.getComment());            column.setDefaultValue(dbColumn.getDefaultValue());            column.setPrecision(dbColumn.getPrecision());            column.setOrderId(dbColumn.getSeqno());            column.setDataType(DataTypeMapping.getDataType(dbType.getName(),column.getDBDataType()));            if (dbColumn.isIdentity()) {                table.setPrimaryKeyType(PrimaryKeyType.IdEntity);            }            if (dbColumn.isPrimaryKey()) {                column.setPrimaryKey(true);                table.setPrimaryKey(column.getField());            }            columns.add(column);        }        return columns;    }}