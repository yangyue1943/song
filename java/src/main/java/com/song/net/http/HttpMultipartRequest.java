package com.song.net.http;import com.song.io.StreamHelper;import com.song.lang.StringHelper;import com.song.util.MapHelper;import javax.servlet.ServletInputStream;import javax.servlet.http.HttpServletRequest;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.HashMap;import java.util.List;/** * description: * author:          song * createDate:      2017/9/28 */public class HttpMultipartRequest extends HttpRequest {    //http://www.cnblogs.com/steve-cnblogs/articles/5420198.html    /*------WebKitFormBoundaryAw0S6vRSMde7SMLSContent-Disposition: form-data; name="file"; filename=""Content-Type: application/octet-stream------WebKitFormBoundaryAw0S6vRSMde7SMLSContent-Disposition: form-data; name="name"ÃÏÊý»µ------WebKitFormBoundaryAw0S6vRSMde7SMLS--     */    public HttpMultipartRequest(HttpServletRequest request) {        super(request);        this.parseContentType();    }    public List<HttpFile> getFiles(){        List<HttpFile> files = new ArrayList<HttpFile>();        return files;    }    private String boundary;    public String getBoundary(){        return StringHelper.isEmpty(boundary) ? null : HttpMultipart.WRAP+boundary;    }    public String getBoundaryEnd(){        String b=getBoundary();        return StringHelper.isEmpty(b) ? null : b+HttpMultipart.WRAP;    }    private void parseContentType(){        String contentType=request.getContentType();        if(!StringHelper.isEmpty(contentType)){            String[] types = contentType.split(";");            if(types.length>1){                HashMap<String, String> map = MapHelper.split(contentType, ";", "=");                if(map.containsKey("boundary")){                    this.boundary = map.get("boundary");                }            }        }    }    private void parseBoundaryStream() throws IOException{        String start=this.getBoundary();        String end=this.getBoundaryEnd();        //存在分隔符边界，则解析流        if(!StringHelper.isEmpty(start)) {            ServletInputStream stream = null;            BufferedReader reader = null;            try {                stream = this.request.getInputStream();                reader = new BufferedReader(new InputStreamReader(stream));                String line = null;                while ((line = reader.readLine()) != null) {                    //item开始                    if (line.startsWith(start)) {                    }                }            } finally {                StreamHelper.close(stream);                reader.close();            }        }    }}